apiVersion: v1
kind: Pod
metadata:
  name: pod-setup-redis-cluster
  namespace: learn-k8s
spec:
  containers:
  - name: setup-redis-cluster
    image: busybox:1.31.1
    command:
    - sh
    - -c
    - |
      #!/bin/sh
      set -e

      # Define the pod DNS names
      pod_names=(
        "redis-slave-0.redis-slave.learn-k8s.svc.cluster.local"
        "redis-slave-1.redis-slave.learn-k8s.svc.cluster.local"
        "redis-slave-2.redis-slave.learn-k8s.svc.cluster.local"
        "redis-master-0.redis-master.learn-k8s.svc.cluster.local"
        "redis-master-1.redis-master.learn-k8s.svc.cluster.local"
        "redis-master-2.redis-master.learn-k8s.svc.cluster.local"
      )

      # Function to perform nslookup and extract the IP address
      get_ip() {
        nslookup $1 | grep 'Address: ' | grep -v '#' | awk '{print $2}'
      }

      # Function to check pod readiness
      check_pod_ready() {
        kubectl get pod $1 -n learn-k8s -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null
      }

      # Wait for all pods to be ready
      for pod in "${pod_names[@]}"; do
        pod_name=$(echo $pod | cut -d'.' -f1)
        while true; do
          status=$(check_pod_ready $pod_name)
          if [ "$status" == "True" ]; then
            break
          fi
          echo "Waiting for $pod_name to be ready..."
          sleep 5
        done
      done

      # Retrieve the IP addresses for each pod
      ips=()
      for pod in "${pod_names[@]}"; do
        ip=$(get_ip $pod)
        if [ -n "$ip" ]; then
          ips+=($ip)
        else
          echo "Failed to resolve IP for $pod"
          exit 1
        fi
      done

      # Join the Redis cluster using the resolved IPs
      for ip in "${ips[@]}"; do
        redis-cli --cluster add-node $ip:6379 $(hostname -i):6379
      done