apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: learn-k8s
data:
  redis.conf: |+
    protected-mode no
    port 6379
    cluster-enabled yes
    cluster-config-file nodes.conf
    cluster-node-timeout 5000
    appendonly yes
    logfile /var/log/redis.log
    dir /data
  bootstrap.sh: |+
    #!/bin/sh
    echo "Start assign and fix slots for Redis cluster nodes"

    pod_names="
      redis-slave-0.redis-slave.learn-k8s.svc.cluster.local
      redis-slave-1.redis-slave.learn-k8s.svc.cluster.local
      redis-slave-2.redis-slave.learn-k8s.svc.cluster.local
      redis-master-1.redis-master.learn-k8s.svc.cluster.local
      redis-master-2.redis-master.learn-k8s.svc.cluster.local
    "

    # Initialize an array to store IPs
    ips=""

    # Function to perform nslookup and extract the IP address
    get_ip() {
      nslookup $1 | grep 'Address: ' | grep -v '#' | awk '{print $2}'
    }

    # Retrieve the IP addresses for each pod
    for pod in $pod_names; do
      ip=$(get_ip $pod)
      echo "Resolved IP for $pod: $ip"
      if [ -n "$ip" ]; then
        ips="$ips $ip"
      else
        echo "Failed to resolve IP for $pod"
        exit 1
      fi
    done

    echo "Join the Redis cluster using the resolved IPs"
    for ip in $ips; do
      echo "Check if Redis is accepting connections on port 6379"
      while ! nc -z "$ip" 6379; do
        echo "Waiting for Redis at $ip to be ready..."
        sleep 5
      done
      echo "Redis at $ip is ready. Joining the cluster..."
      redis-cli -h redis-master-0.redis-master.learn-k8s.svc.cluster.local CLUSTER MEET $ip 6379
    done

    redis-cli --cluster replicate redis-master-1.redis-master.learn-k8s.svc.cluster.local
    echo "Fix slots"
    echo "yes" | redis-cli --cluster fix redis-master-0.redis-master.learn-k8s.svc.cluster.local:6379 --cluster-yes
    echo "Done"